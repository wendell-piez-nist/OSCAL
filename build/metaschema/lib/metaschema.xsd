<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="qualified"
  xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0"
  xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
  targetNamespace="http://csrc.nist.gov/ns/oscal/metaschema/1.0">

  <!-- Import any OSCAL schemas needed for samples... -->
  <!--<xs:import namespace="http://csrc.nist.gov/ns/oscal/1.0"
    schemaLocation="../../../schema/xml/oscal-catalog-schema.xsd"/>-->
  <xs:element name="METASCHEMA">
    <xs:annotation>
      <xs:documentation>Root element of an OSCAL Metaschema metaschema. Defines a family of data
        structures.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="m:schema-name"/>
        <xs:element ref="m:schema-version" minOccurs="0"/>
        <xs:element ref="m:short-name"/>
        <xs:element ref="m:namespace" minOccurs="1"/>
        <xs:element ref="m:remarks" minOccurs="0"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="m:import"/>
          <xs:element ref="m:define-assembly"/>
          <xs:element ref="m:define-field"/>
          <xs:element ref="m:define-flag"/>
          <xs:element ref="m:augment"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="root" use="required" type="xs:NCName"/>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="define-assembly">
    <xs:annotation>
      <xs:documentation>An element with structured element content in XML; in JSON, an object with
        properties.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:formal-name"/>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="m:key"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:flag"/>
        <xs:element name="model" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="m:assembly"/>
                <xs:element ref="m:field"/>
                <xs:element ref="m:choice"/>
                <xs:element ref="m:prose"/>
              </xs:choice>
              <xs:element ref="m:any" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"
        />
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="define-field">
    <xs:annotation>
      <xs:documentation>In JSON, an object with a nominal string value (potentially with internal
        inline - not fully structured - markup). In XML, an element with string or mixed
        content.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:formal-name"/>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="m:key"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="m:value-key"/>
        <!--<xs:choice maxOccurs="unbounded" minOccurs="0">
          <xs:element name="flag" type="m:local-flag-definition"/>
          <xs:element name="flag" type="m:named-flag"/>
        </xs:choice>-->
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:flag"/>
        <xs:element minOccurs="0" ref="m:valid-values"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"
        />
      </xs:sequence>
      <xs:attribute name="datatype">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="boolean"/>
            <xs:enumeration value="empty"/>
            <xs:enumeration value="string"/>
            <xs:enumeration value="mixed"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="collapsible" type="xs:NCName"/>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="key">
    <xs:annotation>
      <xs:documentation>In the XML, produces an attribute with the given name, whose value is used as a key value (aka object property name) in the JSON, enabling objects to be 'lifted' out of arrays when such values are distinct. Implies that siblings will never share values. Overloading with datatype 'ID' and naming the key 'id' is legitimate and useful. Even without ID validation, uniqueness of these values among siblings is validable.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:formal-name"/>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
      </xs:sequence>
      <xs:attribute name="datatype" type="xs:NCName"/>
      <!-- should Schematron check uniqueness among siblings irrespective of datatype -->
      <xs:attribute name="name" type="xs:NCName"/>
      <xs:attribute name="ref" type="xs:NCName"/>
      <!-- do not have to flag if required; it always will be <xs:attribute name="required" type="xs:NCName"/>-->
    </xs:complexType>
  </xs:element>

  <xs:element name="group-as">
    <xs:annotation>
      <xs:documentation>Determines if a given referenced field or assembly should be wrapped in an outer grouping.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:NCName" use="required"/>
      <xs:attribute name="json-behavior" type="m:json-group-behavior" use="optional" default="SINGLETON_OR_ARRAY"/>
      <xs:attribute name="xml-behavior" type="m:xml-group-behavior" use="optional" default="UNGROUPED"/>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="json-group-behavior">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ARRAY">
        <xs:annotation>
          <xs:documentation>Always use an array.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SINGLETON_OR_ARRAY">
        <xs:annotation>
          <xs:documentation>Use a singleton for when a single value occurs or an array when multiple values occur.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BY_KEY">
        <xs:annotation>
          <xs:documentation>Use with a `json-key` in the referenced field or assembly.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="xml-group-behavior">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GROUPED">
        <xs:annotation>
          <xs:documentation>Use a wrapper element.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNGROUPED">
        <xs:annotation>
          <xs:documentation>Do not use a wrapper element.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  
  <!-- a value-key provides a literal to be used in JSON as a key for the field value;
     when given as a child of a flag (reference), designates that flag's value to serve as
     the key (JSON property label) for the field's value. Inside flag this element
     must be empty.  -->
  <xs:element name="value-key">
    <xs:annotation>
      <xs:documentation>Used inside a flag reference, designates
        the flag as a label (key) to be used for the field value in the JSON on
        the field being defined. Used directly inside a field
       definition with a literal value, indicates that the value of the field
       is to be labeled in the JSON with this value.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true"/>
  </xs:element>

  <xs:element name="define-flag">
    <xs:annotation>
      <xs:documentation>A data point to be expressed as an attribute in the XML or a name/value pair
        in the JSON. TBD: make flag definitions optional and implicit from their
        calls.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:formal-name"/>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:valid-values"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"
        />
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
      <!-- datatype should default to 'string' -->
      <xs:attribute name="datatype" type="xs:NCName"/>
      <!-- defined for composed (compiled) metaschemas -->
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="formal-name" type="xs:string">
    <xs:annotation>
      <xs:documentation>A formal name for the data construct, to be presented in documentation. It
        is permissible for a formal name to provide nothing but an expanson of what is already given
        by a tag (for example, this element could have formal name "Formal name") but it should at
        the very least confirm, not confuse.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="namespace" type="xs:anyURI">
    <xs:annotation>
      <xs:documentation>The XML namespace governing the names of elements in XML documents, which
        expect to be conformant to the schemas expressed by this metaschema. By using this
        namespace, documents and document fragments used in mixed-format environments may be
        distinguished from neighbor XML formats using other namespaces. NB this is only for the
        convenience of XML users; this value is not reflected in OSCAL JSON, and OSCAL applications
        should not rely on namespaces alone to disambiguate or resolve semantics – only for
        something more important, namely to manage and expose the governance of relevant
        specifications.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:group name="markup-elements">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:a"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:code"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:q"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:em"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:strong"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="description">
    <xs:annotation>
      <xs:documentation>A short description of the data construct, to be inserted into
        documentation. Unlike 'formal-name' this should not simply repeat what is readily
        discernable from a tag (element name or json label), but say a little more about
        it.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:group ref="m:markup-elements"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="remarks">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="m:p"/>
      </xs:sequence>
      <xs:attribute name="class" type="xs:NMTOKENS"/>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="title">
    <xs:complexType mixed="true">
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:code"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:q"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="schema-name">
    <xs:complexType mixed="true">
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:code"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:q"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="schema-version">
    <xs:complexType mixed="true"/>
  </xs:element>
  <xs:element name="short-name">
    <xs:complexType mixed="true">
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:code"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:q"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="import">
    <xs:complexType mixed="true">
      <xs:attribute name="href" type="xs:anyURI" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="assembly">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:group-as"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
      </xs:sequence>
      <xs:attribute name="ref" use="required" type="xs:NCName"/>
      <xs:attribute name="min-occurs" type="xs:nonNegativeInteger"/>
      <xs:attribute name="max-occurs"
        type="m:natural-number-or-unbounded"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="field">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:group-as"/>
        <xs:element minOccurs="0" ref="m:valid-values"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
      </xs:sequence>
      <xs:attribute name="ref" use="required" type="xs:NCName"/>
      <xs:attribute name="min-occurs" type="xs:nonNegativeInteger"/>
      <xs:attribute name="max-occurs"
        type="m:natural-number-or-unbounded"/>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="natural-number-or-unbounded">
    <xs:union memberTypes="xs:positiveInteger">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="unbounded"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>
  <xs:element name="valid-values">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="m:value"/>
      </xs:sequence>
      <xs:attribute name="allow-other" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="value">
    <xs:complexType mixed="true">
      <xs:group ref="m:markup-elements"/>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="p">
    <xs:complexType mixed="true">
      <xs:group ref="m:markup-elements"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="a">
    <xs:complexType mixed="true">
      <xs:attribute name="href"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="q" type="xs:string"/>
  <xs:element name="code" type="xs:string"/>
  <xs:element name="em" type="xs:string"/>
  <xs:element name="strong" type="xs:string"/>
  <xs:element name="flag">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="1" ref="m:value-key"/>
        <xs:element minOccurs="0" ref="m:formal-name"/>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
        <xs:element minOccurs="0" ref="m:valid-values"/>
      </xs:sequence>
      <xs:attribute name="datatype" type="xs:NCName"/>
      <xs:attribute name="name" type="xs:NCName"/>
      <xs:attribute name="ref" type="xs:NCName"/>
      <xs:attribute name="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <!--<xs:complexType name="local-flag-definition">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:value-key"/>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:element minOccurs="0" ref="m:remarks"/>
      <xs:element minOccurs="0" ref="m:valid-values"/>
    </xs:sequence>
    <xs:attribute name="datatype" type="xs:NCName"/>
    <xs:attribute name="name" type="xs:NCName" use="required"/>
    <xs:attribute name="required" type="xs:NCName"/>
  </xs:complexType>
  <xs:complexType name="flag-reference">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:value-key"/>
    </xs:sequence>
          <xs:attribute name="ref"      type="xs:NCName" use="required"/>
  </xs:complexType>-->

  <xs:element name="choice">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="m:field"/>
        <xs:element ref="m:assembly"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="prose"/>
  <xs:element name="any"/>
  <xs:element name="example">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
        <xs:choice minOccurs="0">
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="href" type="xs:anyURI"/>
      <xs:attribute name="path" type="xs:string"/>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="augment">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:formal-name"/>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"
        />
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
