default namespace = "http://csrc.nist.gov/ns/oscal/1.0"

# We can have a catalog, or we can have only declarations for catalogs, or we can have a framework
# (which is kind of a 'catalog mockup' format)
start = (catalog | declarations | framework | worksheet)

catalog-contents   = (title, declarations?, (section | controlGroup | control)*, references?)

framework-contents = (title, declarations?, (section | componentGroup | component)*, references?)

# 'worksheet' is just an alias for 'framework' for now
worksheet-contents = (title, declarations?, (section | componentGroup | component)*, references?)

catalog    = element catalog { catalog-contents } 

framework = element framework { idAttr?, optionalClass, framework-contents }

worksheet = element worksheet { idAttr?, optionalClass, worksheet-contents }


section = element section { idAttr?, optionalClass,
  title, prose, section*, references? }

# groups may contain more groups, controls or subcontrols
# But controls should not appear in controls (even grouped)
# And subcontrols must not appear without control ancestors
# ... these constraints validated w/ Schematron

controlGroup = element group {
  idAttr?, optionalClass,
  title?, control-components, (controlGroup | control)+, references? }

# 'group' is the element name as it appears in both frameworks, and catalogs
# but they group different things
componentGroup = element group { idAttr?, optionalClass,
  title?, (prop | link | prose)*,
   (componentGroup+ | component+ ) }

component = element component {
    idAttr?, optionalClass, title?,
    (param | prop | link | prose | part)*, component*
  }

# an overlay - a framework whose structure matches the catalog?

# frameworks contain categories or items
# categories contain categories or items
# items contain title?, prop*, p*, link*
# strict governance over item/link/@rel
# declarations too :-)
# validation can ensure that framework links are scoped
# corresponding with catalogs/controls included in the profile

# declarations includes declarations for control types, parameters (names/types),
# authorities (source data for transclusion etc. etc.)
declarations = ( element declarations { hrefAttr?, decls } )

decls = (parameter_decl | property_decl | part_decl | para_decl | link_decl)*

# parameter declarations expose names and default values for parameters within the control type
# XXX not implemented: for now, parameters are declared implicitly (i.e. in use)
# We can add this (w/ support for it) when we wish to constrain them at the OSCAL layer
parameter_decl = empty
# parameter_decl =
# element declare-param { requiredClass, contextAttr, singleton?, desc, \default? }

# property may contain only id, only regex, both id and regex, or (sequence of) values
property_decl =
  element declare-prop { requiredClass, contextAttr, singleton?, required?,
    element identifier { empty }?,
    ( regex | calc* | value* )
  }

# part declaration
# add 'purpose', 'guidance' etc.
part_decl =
  element declare-part { requiredClass, contextAttr, singleton?, required? }

# paragraph declaration
para_decl =
  element declare-p { requiredClass, contextAttr, singleton?, required? }

# link declaration
link_decl =
 element declare-link { relAttr, contextAttr, singleton?, required? }

singleton = element singleton { empty }

required =  element required { empty }

# on 'property and possibly 'parameter',
# element limit { requiredClass, text } w/ @type= upper-bound-inclusive, lower-bound-exclusive, (w/ inclusive/exclusive etc.)

regex = element regex { text }

value = element value { text }

calc = element calc { attribute xml:space { 'preserve' }?, ( \inherit | autonum | text )* }

# empty element because it represents a value to be calculated
\inherit = element inherit { attribute from { text }? }

# this time the text content gives the format of the calculated number
autonum = element autonum { text }

# done with declarations - controls, subcontrols and groups are not declared
# (constrained) at the OSCAL layer so they don't get declaration elements.

# Now for the contents of the OSCAL doc proper ...

# note prose is not included in control-components, unlike item pattern ('component' element)
control-components = ( anyKindofProp | anyKindofPart | link | param)*

control =
  element control {
    idAttr?, optionalClass, title?, (control-components | subcontrol)*, references?
  }

#inControl =  title?, (control-components | subcontrol)*, references?
    
subcontrol =
  element subcontrol {
    idAttr?, optionalClass, title?, control-components, references?
  }

#inSubcontrol = title?, control-components, references?

# === These declarations can be overridden on a level up:

# Add 'semantic' prop types such as name, number, method
anyKindofProp = (prop)*

# Add 'semantic' part types: purpose, guidance, decision, information, remarks (etc) 
anyKindofPart = (part)*

# generic OSCAL doesn't have special kinds of paragraphs
anyKindofP = (p)*

# Rule of thumb for the difference:
# - prop if it's a simple scalar value, never markup of any kind, typically a controlled value
# - p if it's a paragraph or fragment; may contain inline markup
# - part for anything else (statements or more complex structures)

# see utility.xq for analytic breakdown of part types
# so far: description, guidance

# === Back to regular programming

# parts are addressable like controls, but can also have prose content
part =
  element part { asPart }

asPart = 
    idAttr?, optionalClass, title?,
    (prose | control-components)*

title = element title { (text | q)* }

link    = element link { relAttr, hrefAttr, mix }


param   = element param { idAttr?, optionalClass, desc, label?, value? }

desc = element desc { mix }

label = element label { text }


prop =
  element prop { asProp }

asProp = optionalClass, text


prose = ( anyKindofP | ul | ol | pre )*


references = element references { ref+ }

# JATS-like references
ref = element ref { idAttr?, (std | citation | prose )* }

# analogous to JATS mixed-citation[@citation-type='standard'] or equivalent
std =  element std {
         attribute href { xsd:anyURI }?,
         (mix | xref)*
  }

# analogous to JATS mixed-citation
citation =  element citation {
         attribute href { xsd:anyURI }?,
         (mix | xref)*
  }


# We can map more html in if/as needed

p = element p { asP }

asP = idAttr?, optionalClass, whatnot

pre = element pre { idAttr?, (mix | xref)* }

ol = element ol { element li { idAttr?, optionalClass, (whatnot | ol | ul )*  }+ }

ul = element ul { element li { idAttr?, optionalClass, (whatnot | ol | ul )* }+ }

# whatnot includes 'semantical' elements along with the inline mix

whatnot = (
  semantical | mix | xref)*

# note mix does not include anchors, which must be included separately 
mix = (inlines | text)*

# declaring as zeroOrMore/choice avoids XSD substitution group
inlines = (  q | code | em | i | b | sub | sup | span )*


q = element q { (i | b | sub | sup | text)* }

# A bit of code (perhaps capable of evaluation in the correct context)
code = element code { optionalClass, mix }


em = element em { optionalClass, (mix | xref)* }
i  = element i  { optionalClass, (mix | xref)* }
b  = element b  { optionalClass, (mix | xref)* }

sub = element sub { optionalClass, text }
sup = element sup { optionalClass, text }


# An arbitrary span
span = element span { optionalClass, (mix | xref)* }

# Using HTML for this
xref = element a { attribute href { text }?, ( q | code | element em { optionalClass, text } | text )* }

# not html!

# declaring as zeroOrMore/choice avoids XSD substitution group
semantical = ( withdrawn | assign | select )*

# A placeholder status report typically with a cross-reference
withdrawn = element withdrawn { (inlines | text)* }

# A value to be assigned by responder via parameter
# (a parameter must be available)
assign = element insert { idAttr?,
  attribute param-id { xsd:IDREF } }

# A selection to be made by responder - tbd
select = empty
# select = element select { idAttr?, choice* }

# Within a selection, a choice - tbd
# unlike 'value', choice may have inline stuff as well as 'assign' elements
# choice = element choice { (assign | mix)* }

# IDs are required everywhere for now
idAttr      = attribute id { xsd:ID }

# we used to distinguish btw @type and @name the latter for components
# now we overload 'class' every which way
requiredClass = attribute class { text }

optionalClass = attribute class { text }?

contextAttr = attribute context { text }

relAttr = attribute rel { text }?

hrefAttr = attribute href { text }?

#requiredClass = attribute name { xsd:NCName }
