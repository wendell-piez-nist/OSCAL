<?xml version="1.0" encoding="UTF-8"?>
<!-- Last touched 2018-05-09 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://csrc.nist.gov/ns/oscal/1.0" xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0">
  <xs:include schemaLocation="oscal-catalog.xsd"/>
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:element name="profile">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:title"/>
        <xs:element maxOccurs="unbounded" ref="oscal:import"/>
        <xs:element minOccurs="0" ref="oscal:merge"/>
        <xs:element minOccurs="0" ref="oscal:modify"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:idAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="import">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:include"/>
        <xs:element minOccurs="0" ref="oscal:exclude"/>
      </xs:sequence>
      <xs:attributeGroup ref="oscal:hrefAttr"/>
    </xs:complexType>
  </xs:element>
  <!-- presence of element merge means to merge (not merely aggregate) -->
  <xs:element name="merge">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:combine"/>
        <xs:choice minOccurs="0">
          <xs:element ref="oscal:as-is"/>
          <xs:element ref="oscal:custom"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="combine">
    <xs:complexType>
      <xs:attribute name="method" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="use-first"/>
            <xs:enumeration value="merge"/>
            <xs:enumeration value="keep"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="as-is">
    <xs:complexType/>
  </xs:element>
  <xs:element name="custom">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:group ref="oscal:profileGroup"/>
          <xs:element ref="oscal:call"/>
          <xs:element ref="oscal:match"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="profileGroup">
    <xs:sequence>
      <xs:element name="group">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" ref="oscal:title"/>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:group ref="oscal:profileGroup"/>
              <xs:element ref="oscal:call"/>
              <xs:element ref="oscal:match"/>
            </xs:choice>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:element name="modify">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:set-param"/>
        <xs:element ref="oscal:alter"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- Can have either 'all' or (a set of) 'call' -->
  <xs:element name="include">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="oscal:all"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="oscal:call"/>
          <xs:element ref="oscal:match"/>
        </xs:choice>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    We are permitting include/call along with exclude/call to support tweaky with-subcontrol allowances
    But downstream (Schematron) might detect inelegant or inoperable combinations of include/call and exclude/call
  -->
  <!-- Only 'yes' should have any effect; processors should assume 'no' when implicit -->
  <xs:element name="all">
    <xs:complexType>
      <xs:attributeGroup ref="oscal:withSubContrlsAttr"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="withSubContrlsAttr">
    <xs:attribute name="with-subcontrols">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
          <xs:enumeration value="no"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="withContrlAttr">
    <xs:attribute name="with-control">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
          <xs:enumeration value="no"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    'call' can call *either* a control or a subcontrol by its @id
    Schematron requirement: there exists in the catalog a control or subcontrol
    by the given @id
    when @with-subcontrols is used, it must be @control-id
  -->
  <xs:element name="call">
    <xs:complexType>
      <xs:attributeGroup ref="oscal:withSubContrlsAttr"/>
      <xs:attribute name="control-id" type="xs:NCName"/>
      <xs:attributeGroup ref="oscal:withContrlAttr"/>
      <xs:attribute name="subcontrol-id" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <!--
    'match' calls (includes) controls and subcontrols indiscriminately: when matching (as a regex) the @id,
    controls or subcontrols may be included.
    nb this means it is possible to include subcontrols w/o their controls, for later combination w/ other includes
  -->
  <xs:element name="match">
    <xs:complexType>
      <xs:attributeGroup ref="oscal:withSubContrlsAttr"/>
      <xs:attributeGroup ref="oscal:withContrlAttr"/>
      <xs:attribute name="pattern" use="required"/>
      <xs:attribute name="order">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="keep"/>
            <xs:enumeration value="ascending"/>
            <xs:enumeration value="descending"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="exclude">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="oscal:match"/>
        <xs:element maxOccurs="unbounded" name="call">
          <xs:complexType>
            <xs:attribute name="control-id" type="xs:NCName"/>
            <xs:attribute name="subcontrol-id" type="xs:NCName"/>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- May have to loosen to value?, select? for metaschema -->
  <xs:element name="set-param">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:label"/>
        <xs:element minOccurs="0" ref="oscal:desc"/>
        <xs:element minOccurs="0" ref="oscal:requirement"/>
        <xs:choice minOccurs="0">
          <xs:element ref="oscal:value"/>
          <xs:element ref="oscal:select"/>
        </xs:choice>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:link"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:part"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="param-id" use="required" type="xs:NMTOKEN"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="alter">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:remove"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:add"/>
      </xs:sequence>
      <xs:attribute name="control-id" type="xs:NCName"/>
      <xs:attribute name="subcontrol-id" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="remove">
    <xs:complexType>
      <xs:attribute name="class-ref" type="xs:NMTOKENS"/>
      <xs:attribute name="id-ref" type="xs:NCName"/>
      <xs:attribute name="item-name" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="add">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:title"/>
        <xs:element ref="oscal:param"/>
        <xs:element ref="oscal:prop"/>
        <xs:element ref="oscal:part"/>
      </xs:choice>
      <xs:attribute name="position">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="before"/>
            <xs:enumeration value="after"/>
            <xs:enumeration value="starting"/>
            <xs:enumeration value="ending"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
