<?xml version="1.0" encoding="UTF-8"?>
<!-- Last touched 2018-05-09 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://csrc.nist.gov/ns/oscal/1.0" xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0">
  <xs:include schemaLocation="oscal-declarations.xsd"/>
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <!-- This module declares core components of catalogs. It includes the declarations model. -->
  <xs:element name="catalog" type="oscal:catalog-contents"/>
  <xs:complexType name="catalog-contents">
    <xs:sequence>
      <xs:element ref="oscal:title"/>
      <xs:element minOccurs="0" ref="oscal:declarations"/>
      <xs:element minOccurs="0" ref="oscal:references"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:section"/>
        <xs:element ref="oscal:group"/>
        <xs:element ref="oscal:control"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="section">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:title"/>
        <xs:group ref="oscal:prose"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:section"/>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!--
    groups may contain more groups, controls or subcontrols
    But controls should not appear in controls (even grouped)
    And subcontrols must not appear without control ancestors
    ... these constraints validated w/ Schematron
  -->
  <xs:element name="group">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:param"/>
          <xs:element ref="oscal:link"/>
          <xs:element ref="oscal:prop"/>
          <xs:element ref="oscal:part"/>
        </xs:choice>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="oscal:group"/>
          <xs:element ref="oscal:control"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!--
    done with declarations - controls, subcontrols and groups are not declared
    (constrained) at the OSCAL layer so they don't get declaration elements.
  -->
  <!-- Now for the contents of the OSCAL doc proper ... -->
  <xs:element name="control">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:param"/>
          <xs:element ref="oscal:link"/>
          <xs:element ref="oscal:prop"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:part"/>
          <xs:element ref="oscal:subcontrol"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- inControl =  title?, (control-components | subcontrol)*, references? -->
  <xs:element name="subcontrol">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="oscal:title"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="oscal:param"/>
          <xs:element ref="oscal:link"/>
          <xs:element ref="oscal:prop"/>
          <xs:element ref="oscal:part"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="oscal:references"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- inSubcontrol = title?, control-components, references? -->
  <!--
    Rule of thumb for the difference:
    - prop if it's a simple scalar value, never markup of any kind, typically a controlled value
    - p if it's a paragraph or fragment; may contain inline markup
    - part for anything else (statements or more complex structures)
  -->
  <!--
    see utility.xq for analytic breakdown of part types
    so far: description, guidance
  -->
  <!-- === Back to regular programming -->
  <!-- parts are addressable like controls, but can also have prose content -->
  <xs:element name="part" type="oscal:asPart"/>
  <!-- asPart allows other things (in importing schemas) to declare themselves as parts or part-like -->
  <xs:complexType name="asPart">
    <xs:sequence>
      <xs:element minOccurs="0" ref="oscal:title"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:param"/>
        <xs:element ref="oscal:prop"/>
      </xs:choice>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="oscal:prose"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:link"/>
        <xs:element ref="oscal:part"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attributeGroup ref="oscal:optionalClass"/>
  </xs:complexType>
  <xs:element name="title">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:q"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="link">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
      <xs:attributeGroup ref="oscal:relAttr"/>
      <xs:attributeGroup ref="oscal:hrefAttr"/>
    </xs:complexType>
  </xs:element>
  <!--
    At higher levels, desc and label may repeat ("echoed" from lower layers) but not in catalogs
    Here, value is a nominal default value (single-value)
    So it must be a scalar - to have values w/ cascading parameters use select[count(choice)=1]
  -->
  <xs:element name="param">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="oscal:label"/>
        <xs:element minOccurs="0" ref="oscal:desc"/>
        <xs:element minOccurs="0" ref="oscal:requirement"/>
        <xs:choice minOccurs="0">
          <xs:element ref="oscal:value"/>
          <xs:element ref="oscal:select"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attributeGroup ref="oscal:optionalClass"/>
      <xs:attribute name="depends-on" type="xs:IDREF"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="desc">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="label" type="xs:string"/>
  <xs:element name="requirement">
    <xs:complexType mixed="true">
      <xs:attribute name="test"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="prop">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="oscal:asProp"/>
    </xs:complexType>
  </xs:element>
  <!-- asProp allows other things (in importing schemas) to declare themselves as properties or property-like -->
  <xs:attributeGroup name="asProp">
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attributeGroup ref="oscal:optionalClass"/>
  </xs:attributeGroup>
  <xs:group name="prose">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:p"/>
        <xs:element ref="oscal:ul"/>
        <xs:element ref="oscal:ol"/>
        <xs:element ref="oscal:pre"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="references">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:ref"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:link"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- somewhat JATS-like references -->
  <xs:element name="ref">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:citation"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:link"/>
        <xs:group ref="oscal:prose"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <!--
    analogous to JATS mixed-citation[@citation-type='standard'] or equivalent
    std =  element std {
           attribute href { xsd:anyURI }?,
           (mix | xref)*
    }
  -->
  <!-- analogous to JATS mixed-citation -->
  <xs:element name="citation">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attribute name="href" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <!-- We can map more html in if/as needed -->
  <xs:element name="p" type="oscal:asP"/>
  <!-- Anything p-like can be declared 'asP', which is to say mixed content (unlike parts and props) -->
  <xs:complexType name="asP" mixed="true">
    <xs:group ref="oscal:whatnot"/>
  </xs:complexType>
  <xs:element name="pre">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ol">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="li">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:whatnot"/>
        <xs:element ref="oscal:ol"/>
        <xs:element ref="oscal:ul"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="ul">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="oscal:li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- whatnot includes 'semantical' elements along with the inline mix -->
  <xs:group name="whatnot">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:semantical"/>
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!-- note mix does not include anchors, which do not come for free -->
  <xs:group name="mix">
    <xs:sequence>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="oscal:inlines"/>
    </xs:sequence>
  </xs:group>
  <!-- declaring as zeroOrMore/choice avoids XSD substitution group -->
  <xs:group name="inlines">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:q"/>
        <xs:element ref="oscal:code"/>
        <xs:element ref="oscal:em"/>
        <xs:element ref="oscal:strong"/>
        <xs:element ref="oscal:b"/>
        <xs:element ref="oscal:i"/>
        <xs:element ref="oscal:sub"/>
        <xs:element ref="oscal:sup"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!-- q is a little special, it's not just mix and you can't nest it in itself without cheating -->
  <xs:element name="q">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:code"/>
        <xs:element ref="oscal:em"/>
        <xs:element ref="oscal:i"/>
        <xs:element ref="oscal:strong"/>
        <xs:element ref="oscal:sub"/>
        <xs:element ref="oscal:sup"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- A bit of code (perhaps capable of evaluation in the correct context) -->
  <xs:element name="code">
    <xs:complexType mixed="true">
      <xs:group ref="oscal:mix"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="em">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="strong">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="i">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="b">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="sub">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="sup">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- An arbitrary span -->
  <xs:element name="span">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="oscal:mix"/>
        <xs:element ref="oscal:a"/>
      </xs:choice>
      <xs:attributeGroup ref="oscal:optionalClass"/>
    </xs:complexType>
  </xs:element>
  <!-- Using HTML for this -->
  <xs:element name="a">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:q"/>
        <xs:element ref="oscal:code"/>
        <xs:element name="em">
          <xs:complexType mixed="true">
            <xs:attributeGroup ref="oscal:optionalClass"/>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:attribute name="href"/>
    </xs:complexType>
  </xs:element>
  <!-- not html! -->
  <!-- declaring as zeroOrMore/choice avoids XSD substitution group -->
  <xs:group name="semantical">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:insert"/>
        <xs:element ref="oscal:select"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!--
    A value to be assigned by responder via parameter
    (a parameter must be available)
  -->
  <xs:element name="insert">
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="param-id" use="required" type="xs:IDREF"/>
    </xs:complexType>
  </xs:element>
  <!--
    A selection to be made by responder - tbd
    select = empty
  -->
  <xs:element name="select">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="oscal:choice"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="how-many">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="one or more "/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!--
    Within a selection, a choice - tbd
    unlike 'value', choice may have inline stuff as well as 'assign' elements
  -->
  <xs:element name="choice">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="oscal:insert"/>
        <xs:group ref="oscal:mix"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- IDs are required everywhere for now -->
  <xs:attributeGroup name="idAttr">
    <xs:attribute name="id" use="required" type="xs:ID"/>
  </xs:attributeGroup>
  <!--
    we used to distinguish btw @type and @name the latter for components
    now we overload 'class' every which way
  -->
  <xs:attributeGroup name="requiredClass">
    <xs:attribute name="class" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="optionalClass">
    <xs:attribute name="class"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="hrefAttr">
    <xs:attribute name="href"/>
  </xs:attributeGroup>
</xs:schema>
<!-- requiredClass = attribute name { xsd:NCName } -->
