<?xml version="1.0" encoding="UTF-8"?>
<!-- OSCAL CATALOG METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0" root="kit">


<!-- Potential improvements to metaschema: 
  
  1. Rename @named to @ref throughout
  2. Also rename flag/@name to flag/@ref
  3. Rename define-flag/@datatype to @as for consistency with define-field
  4. Remove flag/@datatype as duplicative
  5. Support choice/flag?
  
  -->
  
  <schema-name>FAKEUP Testing Schema</schema-name>
  <short-name>oscal-test</short-name>
  <namespace>urn:fakeup</namespace>
  <remarks>
    <p>A test schema for prototyping and demonstrating the metaschema feature set.</p>
  </remarks>

  <import href="module-metaschema.xml"/>
  
  <define-assembly name="kit" group-as="thing-kit">
    <flag name="id" required="yes"/>
    <flag name="some_string" required="yes"/>
    <formal-name>Base</formal-name>
    <description>Wrapper for other stuff</description>
    <remarks>
      <p>The kit can have all kinds of Things.</p>
      <p>feature set for testing (schemas):
          enforcement of addressability constraints (distinctiveness of values)</p>
      <p>feature set for conversions: 'succinct JSON'; mapping nodes to element types in collapsed syntax.</p>
    <p>Also to do: find a case of variability in controls and show it off... parts?</p></remarks>
    <model>
      <field named="another-thing"/>
      <assemblies named="thing"/>
    </model>    
    <example>
      <kit xmlns="urn:fakeup"
        some_string="string">
        <thing some_string="aha" id="thing001">
          <single-required-field>Required</single-required-field>
          <single-field/>
          <single-mixed-field>Mixed content? <i>here be content?</i></single-mixed-field>
        </thing>
      </kit>
    </example>
  </define-assembly>
  
  <define-field name="another-thing">
    <formal-name>Another Thing</formal-name>
    <description>Yeah....</description>
  </define-field>
  
  <define-assembly name="thing" group-as="things">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="some_string" required="yes"/>
    <formal-name>Base</formal-name>
    <description>Wrapper for other stuff</description>
    <remarks>
      <p>A thing can be whatever: flags, fields of various sorts mixed and not, and assemblies.
        Also the various sorts of addressing should be demonstrated. The model described should be demonstrated in companion instances (XML and JSON), which can in turn be used as targets for mutual conversion.</p>
    </remarks>
    <model>
      <field named="single-required-field" required="yes"/>
      <assembly named="acquired-model"/>
      <field named="single-mixed-field" required="yes"  />
      <field named="boolean_field"/>
      <fields named="plural-field"/>
      <fields named="plural-mixed-field"/>
      <fields named="plural-flagged-mixed"/>
      <assembly named="single-chunk"/>
      <assemblies named="chunk-among-chunks"/>
      <choice>
        <assembly named="vanilla"/>
        <assembly named="chocolate"/>
      </choice>
    </model>
  </define-assembly>
  
  <define-field name="single-required-field" as="string">
    <formal-name>Single string (required)</formal-name>
    <description>As it says</description>
    <example href="base-example.xml" path="/descendant::single-required-field[1]">
      <!--<description>An example in a remote document</description>-->
    </example>
  </define-field>
  
  <define-field name="single-mixed-field" as="mixed">
    <formal-name>Single string but with mixed content</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="plural-field" as="string" group-as="all-in-fun">
    <formal-name>A single occurrence of a plural (ha)</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="plural-mixed-field" group-as="plurals-mixed" as="string">
    <formal-name>Only one plural, but possibly mixed.</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="plural-flagged-mixed" group-as="plurals" as="string">
    <flag name="some_string"/>
    <formal-name>Only one plural, but possibly mixed and possibly flagged.</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-assembly name="single-chunk">
    <formal-name>Chunk</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
      <prose/>
    </model>
  </define-assembly>
  
  <define-assembly name="chunk-among-chunks" group-as="many-chunks">
    <flag name="boolean_flag"/>
    <formal-name>Chunk among chunks</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
      <prose/>
    </model>
  </define-assembly>
  
  <define-assembly name="vanilla">
    <formal-name>One Choice</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="chocolate">
    <formal-name>Another Choice</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
    </model>
  </define-assembly>
  
  <define-flag name="some_string" datatype="string">
    <formal-name>Some string</formal-name>
    <description>As it says</description>
  </define-flag>
  
  <define-field name="boolean_field" as="boolean">
    <formal-name>A Boolean field</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-flag name="boolean_flag" datatype="boolean">
    <formal-name>A Boolean flag</formal-name>
    <description>As it says</description>
  </define-flag>
  
  <define-flag name="id" datatype="ID">
    <formal-name>An ID</formal-name>
    <description>As it says</description>
  </define-flag>
  
  <!--<define-flag name="">
    <formal-name>A string flag</formal-name>
    <description>As it says</description>
  </define-flag>
  <define-flag name="some_string"/>
  -->
  
  <augment name="acquired-model">
    <formal-name>New name</formal-name>
    <description>Acquired model, but modified</description>
    <remarks class="wap">
      <p>Excellent remarks!</p>
    </remarks>
    <example>
      <acquired-model xmlns="urn:fakeup">okay?</acquired-model>
    </example>
  </augment>
  
</METASCHEMA>
