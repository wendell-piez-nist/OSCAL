(* This is a Markdown Specification based on CommonMark (http://spec.commonmark.org/0.24/) *)

(*
Skipped:
Optional Intendations before/after
Multiple Options for the same Thing (e.g. *** and --- indicate a Thematic Break, but only --- is considered here)
Sometimes, a blank Line must be present after a Block Element to distinguish it from other Elements, this could also be the End of the Document, which is ignored. If such a Block Element is at the End, an empty Line has to be added
*)

Markdown = block, {block};

(*Start Block Elements*)

block = containerBlock | leafBlock;

(*Start Container Block Elements*)

containerBlock = blockQuote;

blockQuteMarker = ">", [" "];
blockQuote = blockQuteMarker, inlineLine, {blockQuteMarker, inlineLine};   (*2. Laziness is ignored for now*)

bulletListMarker = "-";	(*plus and star ignored for now*)
orderedListMarker = digit, "." | ")";
listMarker = bulletListMarker | orderedListMarker;
bulletListItem = bulletListMarker, 3 * space, listItemLeafBlock;   
orderedListItem = orderedListMarker, 2 * space, listItemLeafBlock; 
orderedList = orderedListItem, [blankLine], {orderedListItem, [blankLine]};
bulletList = bulletListItem, [blankLine], {bulletListItem, [blankLine]};

(*End Container Block Elements*)

(*Start Leaf Block Elements*)

(*Setext Headings are ignored*)
leafBlock = thematicBreak | atxHeading | indentedCodeBlock | fencedCodeBlock | linkReferenceDefinition | paragraph | blankLines;

(*Optional Spaces in between the Characters ommitted*)
thematicBreak = (3 * "-"), {-}, {space}, lineEnding;

(*Inline Parsing ommitted, for now the Headings can only be simple Text*)
atxClosingSequence = [space, {"#"}, {space}], lineEnding;	(*May have to be inlined into the atxHeading Specifications, to avoid it matching in another Context*)
atxHeading1 = "#", space, textualContent, atxClosingSequence;
atxHeading2 = "##", space, textualContent, atxClosingSequence;
atxHeading3 = "###", space, textualContent, atxClosingSequence;
atxHeading4 = "####", space, textualContent, atxClosingSequence;
atxHeading5 = "#####", space, textualContent, atxClosingSequence;
atxHeading6 = "######", space, textualContent, atxClosingSequence;
atxHeading = atxHeading1 | atxHeading2 | atxHeading3 | atxHeading4 | atxHeading5 | atxHeading6;

indentedChunk = (4 * space, {space}, nonBlankLine), {(4 * space, {space}, nonBlankLine)};
(*Possibility to not have an empty line before or after an indentedCodeBlock ommitted*)
indentedCodeBlock = blankLine, (indentedChunk, blankLine), {(indentedChunk, blankLine)};

(*Possibility of more than 3 Backticks ommitted*)
(*Possibility of optional Code Fence Indentation ommitted*)
fencedCodeBlock = ("```", [infoString], lineEnding,
				  {line},
				  "```", lineEnding);
				  
(*HTML Blocks ommitted*)


(*Optional Whitespace ommitted*)
linkReferenceDefinition = linkLabel, ":", linkDestination, [space, [linkTitle]], {space}, lineEnding;


paragraph = inlineLine, {inlineLine};

blankLines = blankLine, {blankLine};

(*End Leaf Block Elements*)
(*End Block Elements*)

(*Start Inlines*)

inlineLine = inlineWithoutLineBreak, {inlineWithoutLineBreak}, lineBreak;

inline = codeSpan | emphasis | strongEmphasis | inlineLink | fullReferenceLink | image | hardLineBreak | softLineBreak | textualContent;
inlineWithoutLineBreak = codeSpan | emphasis | strongEmphasis | inlineLink | fullReferenceLink | image | textualContent;

codeSpan = "`", textualContent, "`";
emphasis = "*", textualContent, "*";
strongEmphasis = "**", textualContent, "**";

inlineLink = linkText, "(", [whitespace], [linkDestination], [whitespace, linkTitle], [whitespace], ")";
fullReferenceLink = linkText, linkLabel;

linkText = "[", textualContent, "]";
linkLabel = "[", nonWhitespaceCharacter, 998 * [nonWhitespaceCharacter], "]";	(*TODO: Define that the nonWhitespaceCharacter must not have unescaped square Brackets in this specific Context*)
(*Second Option*)
linkDestination = "<", nonWhitespaceCharacter, {nonWhitespaceCharacter}, ">";
(*First Option*)
linkTitle = ('"', {character}, '"');	(*TODO: Define that the character must not have an unescaped double-quote in this specific Context*)

image = imageDescription, "(", [whitespace], [linkDestination], [whitespace, linkTitle], [whitespace], ")";
imageDescription = "![", textualContent, "]";

lineBreak = hardLineBreak | softLineBreak;
hardLineBreak = ("  " | "\\"), "\n";
softLineBreak = "\n";

textualContent = characterWithoutLinebreak, {characterWithoutLinebreak};
(*End Inlines*)

(*Generic String Terms*)

newline = U+000A;
carriageReturn = U+000D;
lineEnding = newline | carriageReturn;

space = U+0020;
tab = U+0009;
blankLine = {(space | tab)}, lineEnding;

lineTabulation = U+000B;
formFeed = U+000C;
whitespaceCharacter = newline | carriageReturn | space | tab | lineTabulation | formFeed;
whitespace = whitespaceCharacter, {whitespaceCharacter};

unicodeWhitespaceCharacter = (*any code point in the Unicode Zs class*) | tab | carriageReturn | newline | formFeed;
unicodeWhitespace = unicodeWhitespaceCharacter, {unicodeWhitespaceCharacter};

nonWhitespaceCharacter = (*any character that is not a whitespaceCharacter*);
asciiPunctuationCharacter = "!" | '"' | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~";
punctuationCharacter = asciiPunctuationCharacter | (*anything in the Unicode Classes Pc, Pd, Pe, Pf, Pi, Po, Ps*)

nonBlankLine = nonWhitespaceCharacter, {characterWithoutLinebreak}, lineEnding;

characterWithoutLinebreak = (*Unicode code point except newline (U+000A) and carriage return (U+000D)*);

(*Particular Contexts*)

(*List Item*)

(*atxHeading is not multiline, so it does not have to be listItem*)
listItemLeafBlock = atxHeading | listItemFencedCodeBlock | listItemParagraph;

listItemFencedCodeBlock = "```", [infoString], lineEnding,
                          {4 * space, line},
                          4 * space, "```", lineEnding;
listItemParagraph = inlineLine, {4 * space, inlineLine};
