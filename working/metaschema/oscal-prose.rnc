default namespace = "http://csrc.nist.gov/ns/oscal/1.0"

datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

start = proseElement

proseElement = element prose { prose } 

prose = ( p | ul | ol | pre )*

p = element p { everything-inline }

pre = element pre { optionalClass, (mix | xref)* }

ol = element ol { element li { optionalClass, (everything-inline | ol | ul )*  }+ }

ul = element ul { element li { optionalClass, (everything-inline | ol | ul )* }+ }

# whatnot includes 'semantical' elements along with the inline mix

everything-inline = ( mix | special | xref)*

# note mix does not include anchors, which do not come for free
mix = (inlines | text)*

# declaring as zeroOrMore/choice avoids XSD substitution group
# nb anchor element ('xref') is not included in inlines
inlines = (  q | code | em | i | strong | b | sub | sup )*

# q is a little special, it's not just mix
q = element q { (code | em | i | b | strong | sub | sup | text)* }

# A bit of code (perhaps capable of evaluation in the correct context)
code = element code { optionalClass, mix }


strong = element strong { optionalClass, (mix | xref)* }
em     = element em     { optionalClass, (mix | xref)* }
i      = element i      { optionalClass, (mix | xref)* }
b      = element b      { optionalClass, (mix | xref)* }

sub = element sub { optionalClass, text }
sup = element sup { optionalClass, text }

# Using HTML for this
xref = element a { attribute href { text }?, ( q | code | element em { optionalClass, text } | text )* }

# not html!

# declaring as zeroOrMore/choice avoids XSD substitution group
special = ( withdrawn | insert )*

# A placeholder status report typically with a cross-reference
withdrawn = element withdrawn { (inlines | text)* }

# A value to be assigned by responder via parameter
# (a parameter must be available)
insert = element insert { attribute param-id { xsd:IDREF } }

# Within a selection, a choice - tbd
# unlike 'value', choice may have inline stuff as well as 'assign' elements
# choice = element choice { (assign | mix)* }

# IDs are required everywhere for now
# idAttr      = attribute id { xsd:ID }

# we used to distinguish btw @type and @name the latter for components
# now we overload 'class' every which way
requiredClass = attribute class { text }

optionalClass = attribute class { text }?

hrefAttr = attribute href { text }?

#requiredClass = attribute name { xsd:NCName }
