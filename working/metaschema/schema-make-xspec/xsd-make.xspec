<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" stylesheet="../xsd-produce.xsl"
    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    
    <x:scenario label="for METASCHEMA input, produce a schema">
        <x:context>
            <METASCHEMA top="controls" use="control"/>
        </x:context>
        <x:expect label="A schema, with furniture">
            <xs:schema  elementFormDefault="qualified" targetNamespace="http://csrc.nist.gov/ns/oscal/1.0">
                <xs:include schemaLocation="oscal-prose.xsd" />
                <xs:group name="prose">
                    <xs:choice>
                        <xs:element ref="oscal:p" />
                        <xs:element ref="oscal:ul" />
                        <xs:element ref="oscal:ol" />
                        <xs:element ref="oscal:pre" />
                    </xs:choice>
                </xs:group>
            </xs:schema>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="For a component definition, produce an element declaration">
        <x:context href="../metaschema-sketch5.xml" select="/*/*[1]"/>
        <x:expect label="An element declaration">
            <xs:element name="control">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="1" ref="oscal:title"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" ref="oscal:prop"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" ref="oscal:param"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" ref="oscal:part"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" ref="oscal:link"/>
                        <xs:element minOccurs="0" ref="oscal:references"/>
                    </xs:sequence>
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                    <xs:attribute name="class" type="xs:string"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>

    <x:scenario
        label="For a mixed field declaration, produce an element declaration permitting mixed content and an 'id' attribute">
        <x:context>
            <define-field name="title" has-id="none" as="mixed"/>
        </x:context>
        <x:expect label="An element declaration with no attributes, but inline contents">
            <xs:element name="title">
                <xs:complexType mixed="true">
                    <xs:group ref="oscal:everything-inline"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
    
    <x:scenario
        label="For a mixed field declaration declared as mixed with no 'id' attribute, produce the element declaration">
        <x:context>
            <define-field name="title" has-id="none" as="mixed"/>
        </x:context>
        <x:expect label="An element declaration with no attributes, but inline contents">
            <xs:element name="title">
                <xs:complexType mixed="true">
                    <xs:group ref="oscal:everything-inline"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
    
    <x:scenario
        label="For a field declaration declared as mixed with 'id' required, produce an element declaration permitting mixed content">
        <x:context>
            <define-field name="title" has-id="required" as="mixed"/>
        </x:context>
        <x:expect label="An element declaration with required attribute and but inline contents">
            <xs:element name="title">
                <xs:complexType mixed="true">
                    <xs:group ref="oscal:everything-inline"/>
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
    <x:scenario
        label="The same, but this time, not mixed">
        <x:context>
            <define-field name="first"  has-id="required"/>
            <define-field name="second" has-id="none"/>
            <define-field name="third"/>
        </x:context>
        <x:expect label="An element declaration with required attribute and but inline contents">
            <xs:element name="first">
                <xs:complexType mixed="true">
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="second">
                <xs:complexType mixed="true"/>
            </xs:element>
            <xs:element name="third">
                <xs:complexType mixed="true">
                    <xs:attribute name="id" type="xs:ID"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
    <x:scenario
        label="Exception (contradictory) cases">
        <x:context>
            <define-field name="first"  has-id="required">
                <flag name="id"/><!-- ordinarily taken to be optional -->
            </define-field>
            <define-field name="second" has-id="none">
                <flag name="id"/><!-- ordinarily taken to be optional -->
            </define-field>
            <define-field name="third" has-id="none" address="id"/>
            <define-field name="fourth" has-id="none" address="id"><flag name="id"/></define-field>
        </x:context>
        <x:expect label="An element declaration with required attribute and but inline contents">
            <xs:element name="first">
                <xs:complexType mixed="true">
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="second">
                <xs:complexType mixed="true"/>
            </xs:element>
            <xs:element name="third">
                <xs:complexType mixed="true">
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                </xs:complexType>
            </xs:element><xs:element name="fourth">
                <xs:complexType mixed="true">
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
    <x:scenario
        label="And now again, but components">
        <x:context>
            <define-assembly name="first"  has-id="required"/>
            <define-assembly name="second" has-id="none"/>
            <define-assembly name="third"/>
        </x:context>
        <x:expect label="An element declaration with required id attribute as well as inline contents">
            <xs:element name="first">
                <xs:complexType>
                    <xs:attribute name="id" type="xs:ID" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="second">
                <xs:complexType/>
            </xs:element>
            <xs:element name="third">
                <xs:complexType>
                    <xs:attribute name="id" type="xs:ID"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="A field definition with no inline content, but attributes">
        <x:context>
            <define-field name="prop" group-as="props">
                <flag name="class" required="yes"/>
            </define-field>
        </x:context>
        <x:expect label="An element declaration with name, a declared attribute, and 'id' by default">
            <xs:element name="prop">
                <xs:complexType mixed="true">
                    <xs:attribute name="class" type="xs:string" use="required"/>
                    <xs:attribute name="id" type="xs:ID"/>
                </xs:complexType>
            </xs:element>
    </x:expect>
    </x:scenario>
    <x:scenario label="A choice">
        <x:context>
            <choice>
                <field    named="value"/>
                <assembly named="select"/>
            </choice>
        </x:context>
        <x:expect label="XSD choice instruction">
            <xs:choice>
                <xs:element minOccurs="0" ref="oscal:value" />
                <xs:element minOccurs="0" ref="oscal:select" />
            </xs:choice>
        </x:expect>
    </x:scenario>
    <x:scenario label="Prose">
        <x:context>
            <prose/>
        </x:context>
        <x:expect label="Reference to prose (callback)">
            <xs:group ref="oscal:prose"
                maxOccurs="unbounded"
                minOccurs="0" />
        </x:expect>
    </x:scenario>
    <x:scenario label="Another component">
        <x:context>
            <define-assembly name="section" group-as="sections">
                <flag name="class"/>
                
                <model>
                    <field named="title" required="yes"/>
                    <prose/>
                    <assemblies named="section" group-as="sections"/>
                    <assembly named="references"/>
                </model>
            </define-assembly>
        </x:context>
        <x:expect label="An appropriate element declaration">
            <xs:element name="section">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="1" ref="oscal:title"/>
                        <xs:group ref="oscal:prose" maxOccurs="unbounded" minOccurs="0"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" ref="oscal:section"/>
                        <xs:element minOccurs="0" ref="oscal:references"/>
                    </xs:sequence>
                    <xs:attribute name="class" type="xs:string"/>
                    <xs:attribute name="id" type="xs:ID"/>
                </xs:complexType>
            </xs:element>
        </x:expect>
    </x:scenario>
</x:description>
